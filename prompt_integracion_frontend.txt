# üîí Gesti√≥n y verificaci√≥n de roles para usuario SOPORTE

## üöÄ Setup R√°pido del Backend

**PASO 1**: Configurar el backend completo con un solo comando:

```bash
# Configurar base de datos completa con datos de prueba
python manage.py setup_database --reset

# Solo recargar fixtures
python manage.py setup_database --fixtures-only
```

Este comando autom√°ticamente configura:
- ‚úÖ Base de datos con migraciones
- ‚úÖ Usuarios con roles correctos (incluye soporte@autonoma.edu.bo)
- ‚úÖ Cat√°logo de servicios
- ‚úÖ Reservas de prueba

**PASO 2**: Verificar que todo funciona:

## 1. Verificar rol actual del usuario "soporte@autonoma.edu.bo"

- Consulta SQL para usuario:
  ```sql
  SELECT * FROM authz_usuario WHERE email = 'soporte@autonoma.edu.bo';
  ```
- Consulta SQL para roles asociados:
  ```sql
  SELECT * FROM authz_usuario_roles WHERE usuario_id = (SELECT id FROM authz_usuario WHERE email = 'soporte@autonoma.edu.bo');
  ```

## 2. Verificar todos los roles disponibles

- Consulta SQL:
  ```sql
  SELECT * FROM authz_rol ORDER BY id;
  ```
- Seg√∫n los fixtures cargados autom√°ticamente:
  - ID 1 = ADMIN
  - ID 2 = OPERADOR
  - ID 3 = CLIENTE
  - ID 4 = SOPORTE

## 3. Verificar endpoint de listado de usuarios

- Endpoint: `GET /api/usuarios/`
- Respuesta esperada para usuario soporte:
  ```json
  {
    "id": 4,
    "email": "soporte@autonoma.edu.bo",
    "nombres": "Soporte",
    "apellidos": "Sistema",
    "roles": [4],
    "estado": "ACTIVO"
    // ...otros campos
  }
  ```

## 4. Asignar/cambiar rol SOPORTE

- Endpoint disponible:
  ```
  POST /api/usuarios/{id}/asignar-rol/
  Body: { "rol": "SOPORTE" }
  ```
- Alternativa SQL:
  ```sql
  UPDATE authz_usuario_roles SET rol_id = 4 WHERE usuario_id = 4;
  ```

## 5. Estructura de respuesta de usuario

- Respuesta esperada:
  ```json
  {
    "id": 4,
    "email": "soporte@autonoma.edu.bo",
    "nombres": "Soporte",
    "apellidos": "Sistema",
    "roles": [4],
    "estado": "ACTIVO"
    // ...otros campos
  }
  ```
- El campo `roles` es un array de IDs. Si tiene m√∫ltiples roles, aparecer√°n todos los IDs.

---

## üìù Resumen de acci√≥n recomendada

**¬°NUEVO PROCESO SIMPLIFICADO!**

1. **Ejecuta el setup autom√°tico**: `python manage.py setup_database --reset`
   - ‚úÖ Crea todos los usuarios con roles correctos
   - ‚úÖ Carga todos los datos de prueba necesarios
   - ‚úÖ Configura el sistema completo en segundos

2. **Verifica que el usuario soporte existe**:
   - Email: `soporte@autonoma.edu.bo`
   - Password: `admin123`
   - Rol: SOPORTE (ID 4)

3. **Si necesitas hacer cambios manuales**:
   - Usa el endpoint `/api/usuarios/{id}/asignar-rol/`
   - O ejecuta las consultas SQL proporcionadas arriba

**‚ö° Todo est√° automatizado**: Ya no necesitas configurar usuarios manualmente. El comando `setup_database` configura el sistema completo con datos consistentes.

---

¬øNecesitas ejemplos de c√≥mo hacer estas peticiones desde el frontend?
