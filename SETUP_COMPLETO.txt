# GU√çA COMPLETA DE CONFIGURACI√ìN Y EJECUCI√ìN - BACKEND SI2
# Sistema de Informaci√≥n II - Universidad Aut√≥noma Gabriel Ren√© Moreno
# Fecha: 6 de octubre de 2025

===============================================================================
üöÄ INSTRUCCIONES PARA CONFIGURAR Y EJECUTAR EL PROYECTO BACKEND
===============================================================================

## PRERREQUISITOS
- Python 3.8 o superior
- Git instalado
- Editor de c√≥digo (VS Code recomendado)

===============================================================================
üìÅ PASO 1: CLONAR Y CONFIGURAR EL PROYECTO
===============================================================================

1. Clonar el repositorio:
   git clone https://github.com/hebertsb/Backend_SI2.git
   cd Backend_SI2

2. Crear entorno virtual:
   python -m venv .venv

3. Activar entorno virtual:
   # En Windows (PowerShell):
   .\.venv\Scripts\Activate.ps1
   
   # En Windows (CMD):
   .venv\Scripts\activate.bat
   
   # En Linux/Mac:
   source .venv/bin/activate

4. Instalar dependencias:
   pip install -r requirements.txt

===============================================================================
üóÑÔ∏è PASO 2: CONFIGURAR BASE DE DATOS
===============================================================================

5. Verificar configuraci√≥n de base de datos:
   # El proyecto est√° configurado para usar SQLite en desarrollo
   # La configuraci√≥n est√° en backend/settings.py

6. Generar migraciones (si no existen):
   python manage.py makemigrations core
   python manage.py makemigrations authz

7. Aplicar migraciones:
   python manage.py migrate

8. Verificar que se cre√≥ la base de datos:
   # Debe aparecer el archivo db.sqlite3 en la ra√≠z del proyecto

===============================================================================
üë§ PASO 3: CREAR USUARIO ADMINISTRADOR
===============================================================================

9. Crear superusuario:
   python manage.py createsuperuser
   
   # Te pedir√°:
   # - Email: admin@test.com (o el que prefieras)
   # - Nombres: Admin
   # - Apellidos: Sistema
   # - Password: (elige una contrase√±a segura)

===============================================================================
üìä PASO 4: POBLAR LA BASE DE DATOS (DATOS INICIALES)
===============================================================================

10. Cargar datos de roles y usuarios (si existen):
    # Verificar si existen archivos de fixtures:
    python manage.py loaddata authz/fixtures/roles_seed.json
    python manage.py loaddata authz/fixtures/datos_usuarios.json

11. Cargar datos de cat√°logo (si existen):
    python manage.py loaddata catalogo/fixtures/initial_data.json

12. Cargar datos de descuentos (si existen):
    python manage.py loaddata descuentos/fixtures/descuentos.json

13. Cargar datos de cupones (si existen):
    python manage.py loaddata cupones/fixtures/cupones_data.json

===============================================================================
üîß PASO 5: VERIFICAR CONFIGURACI√ìN
===============================================================================

14. Verificar que no hay errores:
    python manage.py check

15. Verificar las migraciones:
    python manage.py showmigrations

16. (Opcional) Verificar la estructura de la base de datos:
    python manage.py inspectdb | findstr "class"

===============================================================================
üöÄ PASO 6: EJECUTAR EL SERVIDOR
===============================================================================

17. Iniciar el servidor de desarrollo:
    python manage.py runserver

    # El servidor se ejecutar√° en: http://127.0.0.1:8000/

18. Probar los endpoints principales:
    # Admin: http://127.0.0.1:8000/admin/
    # API Docs: http://127.0.0.1:8000/docs/
    # API Schema: http://127.0.0.1:8000/api/schema/

===============================================================================
üìù COMANDOS ADICIONALES √öTILES
===============================================================================

# Crear datos de prueba con shell de Django:
python manage.py shell

# En el shell, ejecutar:
from authz.models import Usuario, Rol
from core.models import *

# Crear rol administrador
admin_rol, created = Rol.objects.get_or_create(
    nombre="Administrador",
    defaults={'descripcion': 'Acceso completo al sistema'}
)

# Crear categor√≠a de ejemplo
categoria, created = Categoria.objects.get_or_create(
    nombre="Turismo Aventura",
    defaults={'descripcion': 'Actividades de aventura y deportes extremos'}
)

# Crear servicio de ejemplo
servicio, created = Servicio.objects.get_or_create(
    nombre="Tour Ciudad",
    defaults={
        'descripcion': 'Recorrido por los principales atractivos de la ciudad',
        'costo': 150.00,
        'duracion': 480,  # 8 horas en minutos
        'categoria': categoria
    }
)

print("Datos de prueba creados exitosamente!")

# Salir del shell con: exit()

===============================================================================
üêõ SOLUCI√ìN DE PROBLEMAS COMUNES
===============================================================================

‚ùå Error: "No module named 'nombre_modulo'"
‚úÖ Soluci√≥n: pip install -r requirements.txt

‚ùå Error: "django.db.utils.OperationalError: no such table"
‚úÖ Soluci√≥n: python manage.py migrate

‚ùå Error: "Permission denied" al activar entorno virtual
‚úÖ Soluci√≥n: Set-ExecutionPolicy -ExecutionPolicy RemoteSigned -Scope CurrentUser

‚ùå Error: "Port already in use"
‚úÖ Soluci√≥n: python manage.py runserver 8001 (cambiar puerto)

‚ùå Error al crear superusuario
‚úÖ Soluci√≥n: Aseg√∫rate de que las migraciones est√©n aplicadas

===============================================================================
üìã ESTRUCTURA DEL PROYECTO
===============================================================================

Backend_SI2/
‚îú‚îÄ‚îÄ authz/              # Autenticaci√≥n y autorizaci√≥n
‚îú‚îÄ‚îÄ backend/            # Configuraci√≥n principal Django
‚îú‚îÄ‚îÄ catalogo/           # Gesti√≥n de cat√°logo de servicios
‚îú‚îÄ‚îÄ core/               # Modelos centralizados
‚îú‚îÄ‚îÄ cupones/            # Sistema de cupones
‚îú‚îÄ‚îÄ descuentos/         # Sistema de descuentos
‚îú‚îÄ‚îÄ reservas/           # Gesti√≥n de reservas
‚îú‚îÄ‚îÄ soporte/            # Sistema de soporte
‚îú‚îÄ‚îÄ templates/          # Plantillas HTML
‚îú‚îÄ‚îÄ manage.py           # Comando principal Django
‚îú‚îÄ‚îÄ requirements.txt    # Dependencias Python
‚îú‚îÄ‚îÄ db.sqlite3         # Base de datos SQLite (se crea autom√°ticamente)
‚îî‚îÄ‚îÄ README.md          # Documentaci√≥n principal

===============================================================================
üîë ENDPOINTS PRINCIPALES DE LA API
===============================================================================

# Autenticaci√≥n
POST /api/auth/login/           # Iniciar sesi√≥n
POST /api/auth/register/        # Registrar usuario
POST /api/auth/refresh/         # Refrescar token

# Usuarios
GET /api/usuarios/              # Listar usuarios
POST /api/usuarios/             # Crear usuario
GET /api/usuarios/{id}/         # Obtener usuario espec√≠fico

# Servicios
GET /api/servicios/             # Listar servicios
POST /api/servicios/            # Crear servicio
GET /api/servicios/{id}/        # Obtener servicio espec√≠fico

# Reservas
GET /api/reservas/              # Listar reservas
POST /api/reservas/             # Crear reserva
GET /api/reservas/{id}/         # Obtener reserva espec√≠fica

# Descuentos
GET /api/descuentos/            # Listar descuentos
POST /api/descuentos/           # Crear descuento

# Soporte
GET /api/tickets/               # Listar tickets de soporte
POST /api/tickets/              # Crear ticket

===============================================================================
üîß VARIABLES DE ENTORNO (OPCIONAL)
===============================================================================

Crear archivo .env en la ra√≠z del proyecto con:

DEBUG=True
SECRET_KEY=tu-clave-secreta-aqui
DATABASE_URL=sqlite:///db.sqlite3
EMAIL_HOST_USER=tu-email@gmail.com
EMAIL_HOST_PASSWORD=tu-password-app

===============================================================================
üìû CONTACTO Y SOPORTE
===============================================================================

Si encuentras problemas:
1. Revisa los logs en la terminal
2. Verifica que todas las dependencias est√©n instaladas
3. Aseg√∫rate de que el entorno virtual est√© activado
4. Contacta al equipo de desarrollo

Repository: https://github.com/hebertsb/Backend_SI2
Desarrollado para: Sistema de Informaci√≥n II - UAGRM

===============================================================================
‚úÖ CHECKLIST FINAL
===============================================================================

‚ñ° Entorno virtual creado y activado
‚ñ° Dependencias instaladas (requirements.txt)
‚ñ° Migraciones aplicadas
‚ñ° Base de datos creada (db.sqlite3)
‚ñ° Superusuario creado
‚ñ° Datos iniciales cargados (si existen)
‚ñ° Servidor ejecut√°ndose sin errores
‚ñ° Admin panel accesible
‚ñ° API endpoints respondiendo

¬°Proyecto configurado exitosamente! üéâ

===============================================================================